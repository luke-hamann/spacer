// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using spacer.Models;

#nullable disable

namespace spacer.Migrations
{
    [DbContext(typeof(SpacerContext))]
    [Migration("20241101224252_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.35")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("spacer.Models.Comment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("creationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("postId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("postId");

                    b.HasIndex("userId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            id = 1,
                            content = "Test",
                            creationDate = new DateTime(2024, 11, 1, 17, 42, 52, 683, DateTimeKind.Local).AddTicks(7282),
                            postId = 1,
                            userId = 1
                        });
                });

            modelBuilder.Entity("spacer.Models.Post", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("creationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("forumId")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("forumId");

                    b.HasIndex("userId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            id = 1,
                            content = "Test",
                            creationDate = new DateTime(2024, 11, 1, 17, 42, 52, 683, DateTimeKind.Local).AddTicks(7244),
                            forumId = 1,
                            title = "Test",
                            userId = 1
                        });
                });

            modelBuilder.Entity("spacer.Models.Subspace", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Subspaces");

                    b.HasData(
                        new
                        {
                            id = 1,
                            name = "Test"
                        });
                });

            modelBuilder.Entity("spacer.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            id = 1,
                            email = "Test@Gmail.com",
                            name = "Test",
                            password = "password"
                        });
                });

            modelBuilder.Entity("spacer.Models.Comment", b =>
                {
                    b.HasOne("spacer.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("postId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("spacer.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("spacer.Models.Post", b =>
                {
                    b.HasOne("spacer.Models.Subspace", "Subspace")
                        .WithMany("posts")
                        .HasForeignKey("forumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("spacer.Models.User", "User")
                        .WithMany("posts")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subspace");

                    b.Navigation("User");
                });

            modelBuilder.Entity("spacer.Models.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("spacer.Models.Subspace", b =>
                {
                    b.Navigation("posts");
                });

            modelBuilder.Entity("spacer.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("posts");
                });
#pragma warning restore 612, 618
        }
    }
}
